---
# Monitor Server Setup - Simplified Single-Playbook Deployment
# This playbook configures the complete monitor server stack
#
# Prerequisites: Run ./setup_network.sh on the server first
#
# Usage: ansible-playbook -i inventory.ini site.yml

- name: Monitor Server Setup
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: yes

  pre_tasks:
    - name: Display provisioning start message
      debug:
        msg: "Starting Monitor Server provisioning for {{ ansible_hostname }} ({{ ansible_host }})"

    - name: Validate environment prerequisites
      block:
        - name: Check if running as monitor user
          fail:
            msg: "Playbook must be run as 'monitor' user (not root). Current user: {{ ansible_user }}"
          when: ansible_user != 'monitor'

        - name: Verify static IP matches inventory
          command: hostname -I | awk '{print $1}'
          register: current_ip
          changed_when: false

        - name: Display IP verification
          debug:
            msg: "Configured IP: {{ ansible_host }}, Detected IP: {{ current_ip.stdout }}"

        - name: Assert IP consistency (warn only)
          assert:
            that: current_ip.stdout | ipaddr(ansible_host) or ansible_check_mode
            success_msg: "‚úÖ IP configuration verified"
            fail_msg: "‚ö†Ô∏è IP mismatch detected - verify network configuration"
          ignore_errors: yes

        - name: Check essential dependencies
          command: "{{ item }} --version"
          register: cmd_check
          changed_when: false
          failed_when: cmd_check.rc != 0
          with_items:
            - netplan
            - ufw
            - systemctl

        - name: Report dependency status
          debug:
            msg: "All required network dependencies are installed"
          when: not ansible_check_mode

      rescue:
        - name: Prerequisite check failure
          debug:
            msg: |
              Prerequisites validation failed. Please ensure:
              1. Run ./setup_network.sh as root after fresh Debian install
              2. Connected as 'monitor' user: ssh monitor@{{ ansible_host }}
              3. Server has static IP configured: {{ ansible_host }}
          failed_when: true
      tags: [validate, prerequisites]

  roles:
    - basic-utilities
    - ssh-hardening
    - cockpit
    - nginx-proxy
    - website

  post_tasks:
    - name: Display deployment summary
      debug:
        msg: |
          === Monitor Server Deployment Complete ===
          Server: {{ ansible_hostname }}
          IP: {{ ansible_host }}
          Cockpit UI: https://{{ ansible_host }}:9090
          Web Dashboard: https://{{ ansible_host }}
          SSH: ssh monitor@{{ ansible_host }}

    - name: Validate core services
      include_tasks: roles/basic-utilities/tasks/validate.yml
      tags: [validate]

    - name: Validate SSH hardening
      include_tasks: roles/ssh-hardening/tasks/validate.yml
      tags: [validate]

    - name: Validate Cockpit installation
      include_tasks: roles/cockpit/tasks/validate.yml
      tags: [validate]

    - name: Validate Nginx proxy
      include_tasks: roles/nginx-proxy/tasks/validate.yml
      tags: [validate]

    - name: Validate website deployment
      include_tasks: roles/website/tasks/validate.yml
      tags: [validate]

    - name: Final connectivity test
      uri:
        url: "https://{{ ansible_host }}"
        validate_certs: no
        return_content: yes
        status_code: 200
      register: final_web_test
      failed_when: false
      ignore_errors: yes
      when: not ansible_check_mode
      tags: [validate]

    - name: Final success message
      debug:
        msg: "üéâ All services deployed and validated successfully!"
      when: final_web_test is defined and final_web_test.status == 200
